This respository keeps a patch which implements a set of Linux multiprocessor
CPU Bandwidth Control Interfaces based on the idea of Open-Extension 
Container. The path is for 3.4-rc1. 

2012-5-17 afternnon :
In this version, when a task group(except for the root task group) is created,
it is associated with a hyper_irmos_rq. And tasks attached to this group are 
scheduled above the "struct rq" belonging to the hyper_irmos_rq.
requirements:
	CONFIG_SMP disabled
	CONFIG_FAIR_GROUP_SCHED and CONFIG_RT_GROUP_SCHED set

2012-5-17 afternnon - v2 :
requirements:
	CONFIG_SMP disabled

2012-5-18 afternoon :
Improvements: 
	Now, a task can join a per-container scheduling system no matter 
	Linux group scheduling is enabled or not.     
	Still, the codes are experimental: when a new cgroup(except for the 
	root one) is created, it is associated with a hyper_irmos_rq and its 
	tasks are scheduled under the hyper_irmos_rq's scheduling system.
requirements:
	CONFIG_SMP disabled


2012-5-22 evening:
Improvements:
	The bandwidth reservation for cfs tasks works. However, the statistical 
	data recorded is not right.

2012-5-22 evening v2:
	The statistical record misbehavior problem is solved.

Milestone 2012-5-23 morning:
	The temporary name for this project is 
	Multiprocessor Bandwidth Control Interface(MBCI) in Linux.
	Its architechure is based on the idea of Open-Extension(OX) Container
	structure. And its deadline based cpu reservation mechanism is based
	on irmos scheduler.
	Current implementation is still experimental:
	When a sub cgroup is created, it is associated with a hyper_irmos_rq
	and all tasks, rt or normal, attached to this cgroup would be scheduled
	under the hyper_irmos_rq's scheduling system. And the reservation
	parameters of the irmos-rq are fixed. 

Milestone 2012-5-23 morning ps:
	For now, MCBI works on single processor environment. As the name indicates,
	funcationalities, such as task migrations, for multicore platform will be
	added.

2012-5-28 night:
	An cgroup based interface is added and users can reserve bandwidth 
	for a subcgroup, cgroups except for the root cgroup, dynamically. 
	For example,

		echo 0 100000/1000000 > cpu.oxc_control

	This reserve 100000µs every 1000000µs on cpu 0 for a cgroup and its 
	descendant cgroups.

	- By default, there is no reservation for each cgroup.
	- When the first time a cgroup is set such a pair of parameters, the 
	  cgroup and its descendant cgroups would be associated with a 
	  hyper_irmos_rq, where tasks belonging to these cgroups would be 
	  scheduled. And we call this cgroup an irmos cgroup.
	- People can modify reservation parameters of an irmos cgroup using the 
	  same operation.
	- If a user tries to use the above operation on the subgroup of an irmos
	  group, this is regarded as the same situation when reserving bandwidth 
	  for a cgroup for the first time.
	- No ganrantee test is used. 
	
2012-5-29 evening
	Now the CFS group scheduling(CONFIG_FAIR_GROUP_SCHED) is working in 
	hyper_irmos_rq level.
